aspect LookupType {

	syn boolean CompilationUnit.localLookupTSType(String typeName) {
		return getTypeDecl(0).toString().equals(typeName);
	}

	inh CompilationUnit CompilationUnit.getCompilationUnit(String packageName, String typeName);
	inh TypeDecl TypestateMethod.lookupType(String packageName, String typeName);

	eq Program.getCompilationUnit(int j).getCompilationUnit(String packageName, String typeName) {
		if(new File(packageName +  typeName + Program.fileSuffix()).exists())
			compile(packageName +  typeName + Program.fileSuffix());

		if(new File(packageName +  typeName + Program.protocolSuffix()).exists()){
			compile(packageName +  typeName + Program.protocolSuffix());
		}

		for(int i = 0; i < getNumCompilationUnit(); i++){
			if(getCompilationUnit(i).localLookupTSType(typeName))
				return getCompilationUnit(i);
			}
		return null;
	}

	private String CompilationUnit.getPackageString() {
		return getPackageDecl().equals("") ? "" : getPackageDecl().replace('.', File.separatorChar) + File.separatorChar;
	}

	syn TypeDecl CompilationUnit.lookupTSType(String typeName) {
			if(!lookupType(PRIMITIVE_PACKAGE_NAME, typeName).isUnknown()){
				return lookupType(PRIMITIVE_PACKAGE_NAME, typeName);
			}
		String packageName = getPackageString();

		if(localLookupTSType(typeName)){
			return this.getTypeDecl(0);
		}

		CompilationUnit cu;

		if((cu = getCompilationUnit(packageName, typeName)) != null){
			return cu.getTypeDecl(0);
		}

		String s = null;
		for(int i = 0; i < getNumImportDecl(); i++) {
			for (TypeDecl item : getImportDecl(i).importedTypes(typeName)) {
      	s = item.name();
	      if(s != null)
	        if((cu = getCompilationUnit(typeName, s.replace('.', File.separatorChar))) != null){
	          return cu.getTypeDecl(0);
					}
      }
		}

		return new UnknownTypeDecl(new Modifiers(), typeName, new List<BodyDecl>());
	}

	syn TypeDecl CompilationUnit.lookupTSType(String Package, String name) {
		if(Package.equals(""))
			return lookupTSType(name);

		CompilationUnit cu;
		// TODO check local Type??
		String type = (Package + "." + name).replace('.', File.separatorChar);
		if((cu = getCompilationUnit(Package, name)) != null)
			return cu.getTypeDecl(0);
		return new UnknownTypeDecl(new Modifiers(), type, new List<BodyDecl>());
	}

	eq CompilationUnit.getTypeDecl().lookupTSType(String Package, String name) = lookupTSType(Package, name);
	eq CompilationUnit.getImportDecl().lookupTSType(String Package, String name) = null;

	inh TypeDecl Access.lookupTSType(String Package, String name);
	syn lazy TypeDecl Access.lookupTSType(){
		return lookupTSType(getLastAccess().getQualifiedString(), getLastAccess().toString());
	}


}
