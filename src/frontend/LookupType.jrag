aspect LookupType {

	syn boolean CompilationUnit.localLookupTSType(String typeName) {
		return getTypeDecl(0).toString().equals(typeName);
	}
	//TODO:
	eq Program.getChild().getCompilationUnit(String packageName, String typeName) = null;

	inh CompilationUnit CompilationUnit.getCompilationUnit(String packageName, String typeName);

	inh TypeDecl TypestateMethod.lookupTSType(String packageName, String typeName);

	eq Program.getCompilationUnit(int j).getCompilationUnit(String packageName, String typeName) {
		if(new File(packageName +  typeName + Program.fileSuffix()).exists()){
			compile(packageName +  typeName + Program.fileSuffix());
		}

		if(new File(packageName +  typeName + Program.protocolSuffix()).exists()){
			compile(packageName +  typeName + Program.protocolSuffix());
		}
		// System.out.println("============================================ ");

		for(int i = 0; i < getNumCompilationUnit(); i++){
			// System.out.println("==== " +  getCompilationUnit(i).getTypeDecl(0));
			if(!getCompilationUnit(i).localLookupType(typeName).isEmpty()){
				return getCompilationUnit(i);
				}
			}
		return null;
	}

	private String CompilationUnit.getPackageString() {
		return getPackageDecl().equals("") ? "" : getPackageDecl().replace('.', File.separatorChar) + File.separatorChar;
	}

	syn TypeDecl CompilationUnit.lookupTSType(String typeName) {
		// System.out.println("==== " +   typeName);
		if(!(lookupType(PRIMITIVE_PACKAGE_NAME, typeName).isUnknown())){
			return lookupType(PRIMITIVE_PACKAGE_NAME, typeName);
		}
		//
		// TypeDecl defaultType = lookupType("java.lang", typeName);
		// if (defaultType.accessibleFromPackage(packageName())) {
		// 	return defaultType;
		// }

		String packageName = getPackageString();

		if(!localLookupType(typeName).isEmpty() && localLookupType(typeName).isSingleton()){
			return localLookupType(typeName).singletonValue();
		}

		CompilationUnit cu;
		// try{
			if((cu = getCompilationUnit(packageName, typeName)) != null){
				return cu.getTypeDecl(0);
			}
		// }catch(Exception e){
			// System.out.println(" ? " + this);
			// }
		String s = null;
		if(!importedTypes(typeName).isEmpty()){
			for (TypeDecl item : importedTypes(typeName)) {
				s = item.name();
					if((cu = getCompilationUnit(packageName, s.replace('.', File.separatorChar))) != null){
						return cu.localLookupType(typeName).singletonValue();
					}
			}
		}
		// System.out.println(" --UnknownType1-- " + typeName);
		// return new UnknownTypeDecl(new Modifiers(), typeName, new List<BodyDecl>());

		return new UnknownType();
	}

	syn TypeDecl CompilationUnit.lookupTSType(String packageName, String typeName) {
		// System.out.println(" --3-- " + typeName);

		if(packageName.equals(""))
			return lookupTSType(typeName);

		CompilationUnit cu;
		String type = (packageName + "." + typeName).replace('.', File.separatorChar);
		if((cu = getCompilationUnit(packageName, typeName)) != null)
			return cu.localLookupType(typeName).singletonValue();
		// System.out.println(" --UnknownType2-- " + typeName);
		// return new UnknownTypeDecl(new Modifiers(), typeName, new List<BodyDecl>());

		return new UnknownType();
	}

	eq CompilationUnit.getTypeDecl(int i).lookupTSType(String packageName, String typeName) = lookupTSType(packageName, typeName);
	eq CompilationUnit.getImportDecl().lookupTSType(String packageName, String typeName) = null;

	inh TypeDecl Access.lookupTSType(String packageName, String typeName);
	syn lazy TypeDecl Access.lookupTSType(){
		String packageName = lastAccess().getQualifiedString();
		String typeName = lastAccess().toString();
		if(typeName.contains(".")){
			String[] str = typeName.split("\\.");
				typeName = str[str.length-1];
		}
		typeName = typeName.replace("[]", "");

		return lookupTSType(packageName, typeName);
	}

	eq Program.getChild().lookupTSType(String packageName, String typeName) = null;

	inh TypeDecl ClassDecl.lookupTSType(String packageName, String typeName);
	inh TypeDecl PrimitiveCompilationUnit.lookupTSType(String packageName, String typeName);

}
