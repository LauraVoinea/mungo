// /*Algorithm for getting the type of an Expression/Access
//  * Each non-qualified exrpession has a type
//  * - ParseName: looks up the code hierarchy for block variables,
//  *   method/constructor parameters, fields (and super classes).
//  * - Method Access looks up in the hierarcy for matching class
//  *   method signatures and (super classes).
//  *
//  * Qualified types are evaluated access by access on the AbstractDot
//  * class. Method getQualifiedType gets recursively the parent type
//  * of each access of the abstract dot so it can pass it as an argument
//  * to method getType(TypeDecl t) to evaluate its own type.
//  * - ParseName searches the class of its qualified type.
//  *   Note that in the case a ParseName does not have a qualified
//  *   type it searches the hierarchy as the unqualified parse name.
//  * - MethodAccess searches the qualifiedType for matching method
//  *   signatures.
// */
//
// //TODO consider changing the name from getType() to getExprType()
aspect Type {
  // eq NoNameType.getType() = unknownType();

// 	syn lazy TypeDecl Expr.getType();
//
// 	eq VarAccess.getType() = null;							//not used
// 	// eq PackageOrTypeAccess.getType() = null;				//not used
// 	eq PackageAccess.getType() = null;						//not used
// 	// eq AmbiguousAccess.getType() = null;					//not used
//
// 	eq AssignExpr.getType() = getDest().getType();
// 	eq ConditionalExpr.getType() = getTrueExpr().getType() != null ? getTrueExpr().getType() : getFalseExpr().getType();
// 	eq Binary.getType() = getLeftOperand().getType() != null ? getLeftOperand().getType() : getRightOperand().getType();
// 	eq Unary.getType() = getOperand().getType();
// 	eq ParExpr.getType() = getExpr().getType();
//
// 	eq LogicalExpr.getType() = typeBoolean();		//boolean type
// 	eq RelationalExpr.getType() = typeBoolean();		//boolean type
// 	eq InstanceOfExpr.getType() = typeBoolean();		//boolean type
//
// 	eq BooleanLiteral.getType() = typeBoolean();
// 	eq IntegerLiteral.getType() = typeInt();
// 	eq LongLiteral.getType() = typeLong();
// 	eq CharacterLiteral.getType() = typeChar();
// 	eq FloatingPointLiteral.getType() = typeFloat();
// 	eq DoubleLiteral.getType() = typeDouble();
// 	eq StringLiteral.getType() = typeString();
// 	eq NullLiteral.getType() = typeNull();
//
// 	eq CastExpr.getType() = lookupType(getTypeAccess().toString());
// 	eq ClassInstanceExpr.getType() = lookupType(getAccess().toString());
// 	eq ArrayCreationExpr.getType() = lookupType(getTypeAccess().toString());
// 	eq ArrayInit.getType() {
// 		for(int i = 0; i < getNumInit(); i++)
// 			if(getInit(i).getType() != null)
// 				return getInit(i).getType();
// 		return  CompilationUnit.getNoNameType();
// 	}
//
// 	syn lazy TypeDecl Access.getType();
//
// 	//TODO recheck all the nulls --> should return a type
// 	eq ConstructorAccess.getType() =					//equals(super) deprecated -> will never return null
// 			getID().equals("this") ? getCompilationUnitAncestor().getTypeDecl() : null;
// 	eq ThisAccess.getType() = getCompilationUnitAncestor().getTypeDecl();
// 	eq SuperAccess.getType() {
// 		ClassDecl cd = (ClassDecl) getCompilationUnitAncestor().getTypeDecl();
// 		return cd.hasSuperClass() ? cd.getSuperClass().getType() : null;
// 	}//null;					//deprecated
// 	syn lazy TypeDecl TypeAccess.getType() = null;				//inherited by PrimitiveType and ArrayTypeAccess
// 	// eq PrimitiveTypeAccess.getType() =
// 			// CompilationUnit.getPrimitiveType(name());		//PrimitiveTypeAccess inherits from TypeAccess
// 	eq ArrayTypeAccess.getType() = getAccess().getType();			//inherited by ArrayTypeWithSizeAccess
// 	eq ArrayTypeWithSizeAccess.getType() = getAccess().getType();
// 	eq ArrayAccess.getType() = null;					//Only used in Qualified
// 	eq ClassAccess.getType() = CompilationUnit.getClassType();		//Class Access
//
// 	eq ParseName.getType() =
// 		getQualifiedAccess() != null ? getType(getQualifiedType()) : getTypeNoQualified();
// 		//isAbstractDotParent() ? getType(getQualifiedType()) : getTypeNoQualified();
//
// 	eq MethodAccess.getType() = getType(getQualifiedType());
// 	eq Dot.getType() = getRight().getType();
//
//   //TODO: to be implemented
//   // eq Wildcard.getType() = null;
//   // eq WildcardExtends.getType() = null;
//   // eq WildcardSuper.getType() = null;
//   // eq DiamondAccess.getType() = null;
//   // eq SyntheticTypeAccess.getType() = null;
//   eq ParTypeAccess.getType() = null;
//   inh Wildcard.getType();// = null;
//   eq WildcardExtends.getType() = null;
//   eq WildcardSuper.getType() = null;
//   eq DiamondAccess.getType() = null;
//   inh SyntheticTypeAccess.getType();// = null;
//   eq IllegalLiteral.getType() = null;
//   eq LambdaExpr.getType() = null;
//   eq ExprMethodReference.getType() = null;
//   eq TypeMethodReference.getType() = null;
//   eq AmbiguousMethodReference.getType() = null;
//   eq ClassReference.getType() = null;
//   eq ArrayReference.getType() = null;
//   eq IntersectionCastExpr.getType() = null;
// 	/******************************************************/ 		//TODO consider in another file!!
//
// 	syn TypeDecl Expr.getType(TypeDecl t) = getType();			//For the left child of AbstractDot
// 										//TODO What if the right child is an expression
// 										//TODO is getType() correct??
// 	syn TypeDecl Access.getType(TypeDecl t);
//
// 	eq VarAccess.getType(TypeDecl t) = null;				//not used
// 	// eq PackageOrTypeAccess.getType(TypeDecl t) = null;			//not used
// 	eq PackageAccess.getType(TypeDecl t) = null;				//not used
// 	// eq AmbiguousAccess.getType(TypeDecl t) = null;				//not used
// 	eq SuperAccess.getType(TypeDecl t) = null;				//deprecated
//
// 	eq ConstructorAccess.getType(TypeDecl t) = t;				//not used in Qualified
// 	eq ClassInstanceExpr.getType(TypeDecl t) = null;			//not used in Qualified in this version
// 	eq ClassAccess.getType(TypeDecl t) = CompilationUnit.getClassType();	//not used in Qualified in this version
//
// 	eq TypeAccess.getType(TypeDecl t) = null;				//inherited by PrimitiveTypeAccess, ArrayTypeAccess
// 	eq PrimitiveTypeAccess.getType(TypeDecl t) = getType();			//TODO is this correct?
// 	eq ArrayTypeAccess.getType(TypeDecl t) = getAccess().getType(t);			//TODO is this correct?
// 	eq ArrayTypeWithSizeAccess.getType(TypeDecl t) = getAccess().getType(t);		//TODO is this correct?
//
// 	eq ThisAccess.getType(TypeDecl t) = t;					//Qualified this is not supposed to be used,
// 										//except in the case of this.var or this.meth()
//
// 	eq ArrayAccess.getType(TypeDecl t) = t;
// 	eq ParseName.getType(TypeDecl t) {
// 		NameDecl nd;
// 		if((nd = lookupVariable(t)) != null)
// 			return nd.getTypeAccess().lookupTSType();
// 		return CompilationUnit.getNoNameType();
// 	}
//
// 	eq MethodAccess.getType(TypeDecl t) {
// 		MethodDecl m;
// 		if((m = lookupTSMethod(t)) != null)
// 			return m.getTypeAccess().lookupTSType();
// 		return CompilationUnit.getNoNameType();
// 	}
// 	eq Dot.getType(TypeDecl t) =
// 		getRight().getType(getLeft().getType(t));			//should not be used

	/****************Qualified Type**************************/

	syn lazy TypeDecl Access.getQualifiedType() =
		getQualifiedAccess() != null ?
		getQualifiedAccess().__getQualifiedType():
		getTypeNoQualified();

	syn lazy TypeDecl Dot.__getQualifiedType() {
		if(hasParentDot()){
			System.out.println("--------- " + this + " " + parentDot() + " -- " +
			getLeft().lookupType(parentDot().__getQualifiedType().name()) + " ");
			if(getLeft().lookupType(parentDot().__getQualifiedType().name()).isEmpty())
				return unknownType();
			return getLeft().lookupType(parentDot().__getQualifiedType().name()).iterator().next();
		}
		return getLeft().type();
	}

	syn lazy TypeDecl Expr.getTypeNoQualified() = getCompilationUnitAncestor().getTypeDecl(0);//getType(getCompilationUnitAncestor().getTypeDecl());

	eq ParseName.getTypeNoQualified() =
		lookupVariable(name()) != null ?
			lookupVariable(name()).iterator().next().type() :
			unknownType();

	eq PackageParseName.getTypeNoQualified() = lookupType(getPackage(), getID());

}
