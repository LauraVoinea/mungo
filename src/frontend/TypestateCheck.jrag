aspect typestateCheck {
	protected void ClassDecl.typestateCheck() {
		getGraph();
	}

	protected void VariableDeclarator.typestateCheck() {
		if(getTypeAccess().type() != null && getTypeAccess().type().isTypestateClassDeclType()) {
			typestate.reportErrors("Object reference is used uninitialised.");
			if(getTypeAccess().type().getTypestateDecl() != null) {
				GraphNode t = getTypeAccess().type().getTypestateDecl().createTypestate().normalise();
				typestate.checkTypestate(t, "The typestate of the created object does not match its declared typestate.");
			}
		}
	}

	protected void ParameterDeclaration.typestateCheck() {
		if(getTypeAccess().type() != null && getTypeAccess().type().isTypestateClassDeclType()) {
			typestate.reportErrors("Object reference is used uninitialised");
			if(getTypeAccess().type().getTypestateDecl() != null) {
				GraphNode t = getTypeAccess().type().getTypestateDecl().createTypestate().normalise();
				typestate.checkTypestate(t, "The typestate of the created object does not match its declared typestate.");
			}
		}
	}
/*
	protected void MethodAccess.typestateCheck() {
		MethodDecl md= lookupMethod(getQualifiedType());		//TODO get a lookupMethod()
		if(md != null && md.isTypestateMethod()) {
			GraphNode t = md.getTypestateMethod().getTType().createTypestate();
			if(t != null) {
				t.normalise();
				typestate.checkTypestate(t, "The typestate of the returned object does not match the return typestate.");
			}
		}
	}
*/
}
