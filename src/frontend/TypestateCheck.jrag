aspect typestateCheck {
	protected void ClassDecl.typestateCheck() {
		// System.out.println("~~~~~~~~~~0~~~~~~~~~~~~~~~~ " + this + " " +
		// (this instanceof TypestateClassDecl) );
		getGraph();

		if(hasSuperclass() && this.superclass().isTypestateClassDeclType()){
			// System.out.println("~~~~~~~~~~X~~~~~~~~~~~~~~~~" + this + getSuperClass().lookupTSType().getTypestateDecl()
			// );

			GraphNode t_1 = getSuperClass().lookupTSType().getTypestateDecl().createTypestate().normalise();
			GraphNode t_2 = getTypestateDecl().createTypestate().normalise();
			if(!t_2.includes(t_1)) {
				addSemanticError("The typestate of a subclass should be a subtype of the superclass typestate");
			}
	}
	}

	protected void Declarator.typestateCheck() {
		if(getTypeAccess().lookupTSType() != null && getTypeAccess().lookupTSType().isTypestateClassDeclType()) {
			typestate.reportErrors("Object reference is used uninitialised.");
			if(getTypeAccess().lookupTSType().getTypestateDecl() != null) {
				// System.out.println("~~~~~~~~~~1~~~~~~~~~~~~~~~~ " + this + " " + getTypeAccess() + " " + getTypeAccess().lookupTSType().getTypestateDecl());
				GraphNode t = getTypeAccess().lookupTSType().getTypestateDecl().createTypestate().normalise();
				typestate.checkTypestate(t, "The typestate of the created object does not match its declared typestate.");
			}
		}
	}

	protected void ParameterDeclaration.typestateCheck() {
		if(getTypeAccess().lookupTSType() != null && getTypeAccess().lookupTSType().isTypestateClassDeclType()) {
			typestate.reportErrors("Object reference is used uninitialised");
			if(getTypeAccess().lookupTSType().getTypestateDecl() != null) {
				System.out.println("~~~~~~~~~~2~~~~~~~~~~~~~~~~ " + this + " " + getTypeAccess().lookupTSType().getTypestateDecl());
				GraphNode t = getTypeAccess().lookupTSType().getTypestateDecl().createTypestate().normalise();
				typestate.checkTypestate(t, "The typestate of the created object does not match its declared typestate.");
			}
		}
	}
/*
	protected void MethodAccess.typestateCheck() {
		MethodDecl md= lookupMethod(name());		//TODO get a lookupMethod()
		if(md != null && md.isTypestateMethod()) {
			GraphNode t = md.getTypestateMethod().getTType().createTypestate();
			if(t != null) {
				t.normalise();
				typestate.checkTypestate(t, "The typestate of the returned object does not match the return typestate.");
			}
		}
	}
*/
}
