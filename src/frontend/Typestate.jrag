aspect Typestate{

  //class NameDecl
	abstract class NameDecl {
		abstract public Declarator getVariableDecl();
		abstract public Modifiers getModifiers();
		abstract public Access getTypeAccess();
		abstract public List<Dims> getDimss();
		abstract public String getID();
		abstract public TypestateVar getTypestateVar();
	}

	//class VarDecl
	class VarDecl extends NameDecl {
		private Declarator vd;
		public VarDecl(Declarator vd) {
			this.vd = vd;
		}
		public Declarator getVariableDecl() { return vd; }
		public Modifiers getModifiers() { return vd.getModifiers(); }
		public Access getTypeAccess() { return vd.getTypeAccess(); }
		public List<Dims> getDimss() {return vd.getDimss();}
		public String getID() { return vd.getID(); }
		public TypestateVar getTypestateVar() {return vd.typestate;}

	}

	class ParDecl extends NameDecl {
		private ParameterDeclaration pd;
		public ParDecl(ParameterDeclaration pd) {
			this.pd = pd;
		}
		public Declarator getVariableDecl() { return null; }
		public Modifiers getModifiers() { return pd.getModifiers(); }
		public Access getTypeAccess() { return pd.getTypeAccess(); }
		public List<Dims> getDimss() {return null;}
		public String getID() { return pd.getID(); }
		public TypestateVar getTypestateVar() {return pd.typestate;}

	}

	syn lazy NameDecl ParameterDeclaration.toNameDecl() = new ParDecl(this);
	syn lazy NameDecl Declarator.toNameDecl() = new VarDecl(this);

  @Override
  syn NameDecl TypeDecl.lookupVariable(String var) = emptySet();
  @Override
  syn NameDecl ClassDecl.lookupVariable(String var) {
    SimpleSet<Variable> newSet = emptySet();
    for(Declarator vd : getDeclarators())
      if(vd.getID().equals(var))
        newSet = newSet.add(vd.toNameDecl());
        // return vd.toNameDecl();
    //for possible future work
    if(hasSuperclass())
      return superclass().type().lookupVariable(var);
    return newSet;
  }
}
