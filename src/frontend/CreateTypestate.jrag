aspect CreateTypestate {

	syn lazy GraphNode TypestateDecl.createTypestate() = new InitNode().addNext(getInitState().createTypestate());

	private GraphNode State.StateNode = null;
	syn lazy GraphNode State.createTypestate() {
		StateNode = new LoopNode();
		return StateNode.addNext(getTypestate().createTypestate());
	}

	syn boolean State.hasStateNode() = StateNode != null;
	syn GraphNode State.getStateNode() = StateNode;

	syn lazy GraphNode Typestate.createTypestate();

	eq TypestateMethodList.createTypestate() {
		GraphNode n = new LoopNode();
		for(int i = 0; i < getNumTypestateMethod(); i++){
			n.addNext(getTypestateMethod(i).createTypestate());
			System.out.println("create typestate loop " + getTypestateMethod(i).getID());
		}
		return n;
	}

	eq EndTypestate.createTypestate() = new EndNode();

	eq TypestateMethod.createTypestate() =
		new MethodNode(getTType().getAccess(), getID(), getParameterTypes()).addNext(getTypestate().createTypestate());

	eq TypestateSwitch.createTypestate() {
		SwitchNode n =  new SwitchNode();
		System.out.println("create typestate switch " + getNumTypestateSwitchCase());

		for(int i = 0; i < getNumTypestateSwitchCase(); i++) {
			System.out.println("create typestate switch " + i + " " + getTypestateSwitchCase(i).getTypestate());

			SwitchCase c = new SwitchCase(getTypestateSwitchCase(i).getLabel());
			c.addNext(getTypestateSwitchCase(i).getTypestate().createTypestate());
			n.addNext(c);
		}
		return n;
	}

	eq TypestateLabel.createTypestate() =
		getTarget().hasStateNode() ? getTarget().getStateNode() : getTarget().createTypestate();

	syn lazy GraphNode TType.createTypestate() = null;
	eq TTypestate.createTypestate(){
		System.out.println("create TTypestate loop " + getTypestate());

		return new LoopNode().addNext(getTypestate().createTypestate());

	}

}
