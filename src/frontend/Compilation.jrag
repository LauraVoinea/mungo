import beaver.*;
import java.io.*;
import JavaTypestate.parser.*;
import JavaTypestate.scanner.*;

aspect Compilation {

	JavaParser Program.parser;
	protected String CompilationUnit.filePath;

	private boolean Program.verbose = false;
	public void Program.setVerbose() {
		verbose = true;
	}

	private boolean Program.printInference = false;
	public void Program.setPrintInference() {
		printInference = true;
	}

	public boolean Program.printInference() {
		return printInference;
	}

	private PrintStream Program.outStream = System.out;
	private PrintStream Program.errorStream = System.err;

	public void Program.setOutputStream(PrintStream s) {
		outStream = s;
	}

	public void Program.setErrorStream(PrintStream s) {
		errorStream = s;
	}

	public PrintStream Program.outStream() {
		return outStream;
	}

	public PrintStream Program.errorStream() {
		return errorStream;
	}

	protected String CompilationUnit.getFilePath() {
		return filePath;
	}

	private ArrayList<String> Program.compiledPaths = new ArrayList<String>();

	protected static String Program.protocolSuffix() {
		return ".protocol";
	}

	protected static String Program.fileSuffix() {
		//return ".mungo";
		return javaFileSuffix();
	}

	protected static String Program.javaFileSuffix() {
		return ".java";
	}

	protected CompilationUnit Program.compile(String path) {
		CompilationUnit u = null;

		for(int i = 0; i < compiledPaths.size(); i++)
			if(compiledPaths.get(i).equals(path))
				return null;

		if(verbose)
			outStream().println("Compiling file " + path);

		compiledPaths.add(path);

		try{
			FileInputStream fileStream = new FileInputStream(path);
			u = (CompilationUnit) parser.parse(fileStream, path);
		}
		catch(FileNotFoundException e) {
			return null;
		}
		catch(IOException e) {
			return null;
		}
		catch(ParserFailException e) {
			errors.addAll(e.getErrors());
			return null;
		}

		if(verbose)
			outStream().println("Loading file " + path);

		u.filePath = path;
		addCompilationUnit(u);

		return u;
	}

	public void Program.collect() {
		for(int i = 0; i < getNumCompilationUnit(); i++)
			getCompilationUnit(i).collectSemantic();

		for(int i = 0; i < getNumCompilationUnit(); i++) {
			errors.addAll(getCompilationUnit(i).errors);
			numWarnings += getCompilationUnit(i).numWarnings;
		}

		if(!hasErrors()) {
			for(int i = 0; i < getNumCompilationUnit(); i++)
				getCompilationUnit(i).collectTypestate();

			for(int i = 0; i < getNumCompilationUnit(); i++) {
				errors.addAll(getCompilationUnit(i).errors);
				numWarnings += getCompilationUnit(i).numWarnings;
			}
		}

	}

	public boolean Program.compile(String[] args) {
		for(int i = 0; i < args.length; i++)
			if(new File(args[i]).exists())
				if(!args[i].endsWith(fileSuffix()) && !args[i].endsWith(protocolSuffix()))
					errorStream().println("File " + args[i] + " should have suffix " + fileSuffix() + " or suffix " + protocolSuffix());
				else
					compile(args[i]);
			else
				errorStream().println("File " + args[i] + " not found.");

		collect();
		return !hasErrors();
	}

	public void Program.createJavaFiles() {
		for(int i = 0; i < getNumCompilationUnit(); i++) {
			CompilationUnit cu = getCompilationUnit(i);
			if(!cu.getTypeDecl().isTypestateDeclType())
				cu.Rewrite(cu.getType() + javaFileSuffix());
		}
	}

	public class TypestateChecker extends Program {
		public TypestateChecker(JavaParser parser) {
			this.parser = parser;
		}

		public TypestateChecker() {
			this.parser = new JavaParser();
		}

		private void printUnits() {
			for(int i = 0; i < getNumCompilationUnit(); i++) {
				getCompilationUnit(i).Rewrite(System.out);
				if(getCompilationUnit(i).getTypeDecl().isEnumDeclType())
					((ClassDecl) getCompilationUnit(i).getTypeDecl()).getEnumDecl().Rewrite(System.out);
			}

		}

		private void myDebug(String[] args) {
			if(compile(args)) {
				if(hasWarnings())
					printErrors();
			}
			else {
				printErrors();
			}
		}

		public static void main(String [] args) {
			new TypestateChecker(new JavaParser()).myDebug(args);
		}
	}
}
