aspect LookupTSMethod {

	syn lazy TypeDecl[] MethodAccess.getParameterTypes() {
		TypeDecl[] parameterAccess = new TypeDecl[getNumArg()];
		// System.out.println("*****Method Access**** " + this + " " + hostType()
		// + " " + this.getArg(0) +  getNumArg());


		for(int i = 0; i < getNumArg(); i++){
			parameterAccess[i] = getArg(i).type();
			// System.out.println("&&&& " +  getArg(i).type());
		}
		return parameterAccess;
	}

	syn lazy TypeDecl[] TypestateMethod.getParameterTypes() {
		// System.out.println("****TypestateMethod***** " + this);
		TypeDecl[] ParameterAccess = new TypeDecl[getTTypeList().getNumTType()];
		for(int i = 0; i <  getTTypeList().getNumTType(); i++)
			ParameterAccess[i] = getTTypeList().getTType(i).getAccess().type();
		return ParameterAccess;
	}

	syn lazy MethodDecl MethodAccess.lookupTSMethod(TypeDecl t){
		return t != null ? t.lookupTSMethod(getID(), getParameterTypes()) : null;
	}

	syn lazy MethodDecl TypestateMethod.lookupTSMethod(TypeDecl t) {
		if(t != null) {
			// System.out.println("Maiu1" + t);
			MethodDecl md = t.lookupTSMethod(getID(), getParameterTypes());
			TypeDecl td = getTType().getAccess().lookupTSType();
			if(md != null && (md.getTypeAccess().lookupTSType().toString().equals(td.toString()) || (td instanceof UnknownType))){
				return md;
			}
		}

		return null;
	}

	syn MethodDecl TypeDecl.lookupTSMethod(String method, TypeDecl[] parameters){
		return null;
	}
	eq ClassDecl.lookupTSMethod(String method, TypeDecl[] parameters) {
		ArrayList<MethodDecl> a = lookupTSMethodTargets(method, parameters);
		return (a.size() == 1) ? a.get(0) : null;
	}

	coll Set<MethodDecl> ClassDecl.getMethodDecls() [new HashSet<MethodDecl>()] with add root ClassDecl;
	MethodDecl contributes this to ClassDecl.getMethodDecls() for getClassDeclAncestor();


	syn boolean MethodDecl.isTarget(String method, TypeDecl[] parameters) {

		if(!getID().equals(method) || getNumParameter() != parameters.length){
			// System.out.println("Maiu1 " + getID() + " " + hostType() + " " + getNumParameter()
			// + " " + parameters.length);
			return false;
		}


		for(int i = 0; i < getNumParameter(); i++) {
			TypeDecl t = getParameter(i).getTypeAccess().type();
			//null type should not be matched with primitive type
			//noname type should be matched with any type
			//t can never be instanceof NullType
			//overriden equals(Object o) method
			// System.out.println("---- " + this + parameters[i] + " " + t +" "+ parameters[i].name().equals(t.name())
			// + " " + (t instanceof UnknownType));
			if(!parameters[i].name().equals(t.name()) && !(t instanceof UnknownType))
				return false;
		}
		// System.out.println("Maiu1 " + getID() + " " + hostType() + " " + getNumParameter()
		// + " " + parameters.length);
		return true;
	}

	syn ArrayList<MethodDecl> TypeDecl.lookupTSMethodTargets(String method, TypeDecl[] parameters) {
	 	return new ArrayList<MethodDecl>();
 }

	eq ClassDecl.lookupTSMethodTargets(String method, TypeDecl[] parameters) {
		ArrayList<MethodDecl> a = new ArrayList<MethodDecl>();


		for(MethodDecl m : getMethodDecls()){
			// System.out.println("do i ever get here? " + this + " "
			// + m + " " + m.isTarget(method, parameters));

			if(m.isTarget(method, parameters)){
				a.add(m);
				}
			}

		//Implementing super class access
		if((a.size() == 0) && hasSuperClass()) {
			//TODO check if lookupType() really exists
			// System.out.println("do i ever get here? " + this);
			if(!getSuperClass().lookupTSType().isUnknown()){
				return getSuperClass().lookupTSType().lookupTSMethodTargets(method, parameters);
			}
		}

		return a;
	}

	syn lazy ArrayList<MethodDecl> MethodAccess.lookupTSMethodTargets(TypeDecl t) {
		return t != null ? t.lookupTSMethodTargets(getID(), getParameterTypes()) : new ArrayList<MethodDecl>();
	}


}
