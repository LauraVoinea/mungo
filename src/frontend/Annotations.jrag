aspect Annotation {
  syn boolean Modifiers.hasTypestateAnnotation(String packageName) = hasAnnotation(packageName, "Typestate");

  syn Annotation Modifiers.getTypestateAnnotation(String packageName) {
    for (int i = 0; i < getNumModifier(); i++) {
      if (getModifier(i).isAnnotation(packageName, "Typestate")) {
        return (Annotation) getModifier(i);
      }
    }
    return null;
  }


  rewrite ClassDecl{
      when (!(this instanceof TypestateClassDecl) && getModifiers().hasTypestateAnnotation(packageName())) to TypestateClassDecl {
        List<BodyDecl> bodydecls = new List<BodyDecl>();
        List<Access> interfaces = new List<Access>();
        System.out.println("jsdhfdskhfskfk " + this.getProgramAncestor());

        for(int i = 0; i < getNumBodyDecl(); i++){
            bodydecls.add(getBodyDecl(i));
        }

        for(int i = 0; i < getNumImplements(); i++) {
          interfaces.add(getImplements(i));
        }
        if(hasSuperClass())
          return new TypestateClassDecl(getModifiers(), getID(), new Opt(getSuperClass()), interfaces, bodydecls);

        return new TypestateClassDecl(getModifiers(), getID(), new Opt(), interfaces, bodydecls);

            }
        }

  TypestateClassDecl contributes
     errorf("Semantic Error: Class %s cannot extend a class with a typestate.",
         this.getID())
     when hasSuperclass()
         && superclass().isTypestateClassDeclType()
          to CompilationUnit.problems();

}
